#+title: Doom Configuration

* Meta
** Add lexical binding support
Allegedly makes Emacs go fast, vrooooom!

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Defining Variables
** Personal Details
#+begin_src elisp
(setq
 user-full-name "Kevin Rangel"
 user-mail-address "code@venikx.com")
#+end_src
** Interaction & Design
#+begin_src elisp
(global-auto-revert-mode t)

(setq
 doom-theme 'doom-laserwave
 ;;doom-theme 'doom-outrun-electric
 ;;doom-theme 'doom-dracula
 display-line-numbers-type t
 standard-indent 2
 calendar-week-start-day 1 ;; Start on Monday
 projectile-project-search-path '("~/code/"))
#+end_src

* Package Configuration
** Discord
Display what I'm working on in Emacs on Discord.

#+begin_src elisp
(use-package! elcord :custom (elcord-use-major-mode-as-main-icon t))
#+end_src

** e-Readers
Associate ~.epub~ and ~.mobi~ files with the ~nov~ package, so they are found.

#+begin_src elisp
(use-package! nov
  :hook (nov-mode . variable-pitch-mode)
  :mode ("\\.\\(epub\\|mobi\\)\\'" . nov-mode))
#+end_src

** Org-Mode
#+begin_src elisp
(setq
 org-directory "~/org/gtd"
 org-contacts-files "~/org/gtd/contacts.org")

(after! org
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-modules 'org-checklist)
  (setq time-stamp-active t
        org-modules '(ol-bibtex org-checklist org-habit)
        time-stamp-start "#\\+modified:[ \t]*"
        time-stamp-end "$"
        time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
  (setq org-startup-folded 'content
        org-log-into-drawer t
        org-log-done 'time
        org-log-redeadline 'time
        org-log-reschedule 'time
        org-log-refile 'time)
  (add-hook 'before-save-hook 'time-stamp)
  (setq +org-capture-todo-file "capture.org"
        org-capture-templates
        '(("t" "todo" entry
           (file+headline +org-capture-todo-file "Inbox") "* TODO %?\n%i\n%a" :prepend t :clock-in t :clock-resume t)

          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry
           (file+headline +org-capture-project-todo-file "Inbox") "* TODO %?\n%i\n%a" :prepend t :clock-in t :clock-resume t)
          ("pn" "Project-local notes" entry
           (file+headline +org-capture-project-notes-file "Inbox") "* %U %?\n%i\n%a" :prepend t :clock-in t :clock-resume t)
          ("pc" "Project-local changelog" entry
           (file+headline +org-capture-project-changelog-file "Unreleased") "* %U %?\n%i\n%a" :prepend t :clock-in t :clock-resume t)

          ("c" "Centralized templates for projects")
          ("ct" "Project todo" entry
           #'+org-capture-central-project-todo-file "* TODO %?\n%i\n%a" :heading "Tasks" :prepend t :clock-in t :clock-resume t)
          ("cn" "Project notes" entry
           #'+org-capture-central-project-notes-file "* %U %?\n%i\n%a" :heading "Notes" :prepend t :clock-in t :clock-resume t)
          ("cc" "Project changelog" entry
           #'+org-capture-central-project-changelog-file "* %U %?\n%i\n%a" :heading "Changelog" :prepend t :clock-in t :clock-resume t))))
#+end_src

** Org Roam
#+begin_src elisp
(after! org-roam
  (setq org-roam-directory "~/org"
        org-roam-dailies-directory "gtd/journal/")

  (setq org-roam-capture-templates
        '(("n" "Note" plain
           "%?\n\n* Metadata\n- Tags :: \n- Related Notes :: \n- References :: "
           :target (file+head "%<%Y%m%d%H%M%S>.org"
                              "#+title: ${title}\n#+created: %U\n#+modified: %U")
           :empty-lines 1
           :unnarrowed t)
          ("c" "Contact" entry "* ${title} :@:
:PROPERTIES:
:TYPE: person
:MOBILE: %^{Phone Number (+358 45 265 HEYO)}
:BIRTHDAY: %^{Birthday (yyyy-mm-dd)}
:EMAIL: %(org-contacts-template-email)
:ADDRESS: %^{Address (MainStreet, 00100 Helsinki, Finland)}
:CREATED: %t
:ID: %(org-id-uuid)
:END:"
           :target (file "gtd/contacts.org")
           :unnarrowed t)
          ("l" "Literature" entry "* TODO ${title}
:PROPERTIES:
:Creator(s): %^{Creator(s)}
:Origin: %?
:Recommended: %^{Recommended By}
:Rating:
:BTYPE: %^{Type (article)}
:ADDED: %t
:CUSTOM_ID: %^{Cite Key (zzz1970hello)}
:ID: %(org-id-uuid)
:END:"
           :target (file "literature/references.org")
           :prepend t
           :empty-lines 1
           :unnarrowed t)))
  (setq org-roam-dailies-capture-templates
        '(("j" "Journal" entry "* %U %?"
           :target (file+datetree "index.org" day))
          ("m" "Morning Routine" entry "* Morning Routine
,** What happened yesterday?
,** What is today's main purpose?
- [ ]
,** What am I anxious about?
,** What am I grateful for?
,** What am I excited about?"
           :target (file+datetree "index.org" day)
           :prepend t))))
#+end_src

*** Note Graph in Browser
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Org Agenda
#+begin_src elisp
(after! org-agenda
  (setq org-agenda-use-time-grid nil
        org-agenda-start-on-weekday 1))
#+end_src

* Language Configuration
** Javascript
#+begin_src elisp
;;(setq +format-on-save-enabled-modes '(not js2-mode))
;;(add-hook! 'js2-mode-hook 'prettier-js-mode)
;;(set-formatter! 'yapf "yapf --style=google " :modes '(python-mode))
(after! format-all (advice-add 'format-all-buffer :around #'envrc-propagate-environment))
(setq-hook! 'js-mode-hook +format-with-lsp nil)
(setq-hook! 'web-mode-hook +format-with-lsp nil)
#+end_src
** C/C++
#+begin_src elisp
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src
* Publishing
#+begin_src elisp
(use-package! esxml)
#+end_src
** Modifying ox variables
*** TODO Enable babel when exporting
Is this still needed when running from within Emacs?

#+begin_src emacs-lisp +n :results silent
(setq org-confirm-babel-evaluate nil
      org-export-use-babel t)
#+end_src

*** TODO Figure out what these do
Not quite sure what these do yet, aside from they seem to work fine for others

#+begin_src emacs-lisp +n :results silent
(setq org-publish-use-timestamps-flag nil
      org-export-with-section-numbers nil
      org-export-with-smart-quotes t
      org-export-with-sub-superscripts nil
      org-export-with-tags 'not-in-toc
      org-export-headline-levels 7
      org-export-with-toc t
      org-id-track-globally t)
#+end_src

** Modifying ~ox-html~ variables
*** Use modern defaults
The ~ox-html~ package includes a lot of legacy and I prefer using all the new
HTML5 capabilities, and don't want the package to include it's own scripts or
styling.

#+begin_src emacs-lisp +n :results silent
(setq org-html-doctype "html5"
      org-html-html5-fancy t
      org-html-checkbox-type 'html
      org-html-use-infojs nil
      org-html-head-include-default-style nil
      org-html-head-include-scripts nil)
#+end_src

*** Use semantic HTML for text markup
The main changes compared to the defaults are for *bold* and /italic/. I prefer
to use the semantic meaning of these HTML elements, because in generally I want
to convey the same semantic meaning as I write in org-mode.

#+begin_src emacs-lisp +n :results silent
(setq org-html-text-markup-alist
      '((bold . "<strong>%s</strong>")
        (code . "<code>%s</code>")
        (italic . "<em>%s</em>")
        (strike-through . "<del>%s</del>")
        (underline . "<span class=\"underline\">%s</span>")
        (verbatim . "<code>%s</code>")))
#+end_src

*** Force using external CSS files
#+begin_src emacs-lisp +n :results silent
(setq org-html-htmlize-output-type 'css)
#+end_src

*** TODO check what these do
No idea what these do lol. Stole them from someone else.

#+begin_src emacs-lisp +n :results silent
(setq org-html-inline-images t)
#+end_src
** venikx.com
*** Defining Variables
The ~venikx.com-root~ variable has been declared inside the ~venikx.com.el~
function, because the root was needed to load the current org-mode file to parse
it through babel.

#+begin_src elisp
(defvar venikx.com-root "~/code/venikx.com")

(defvar venikx.com-pages (expand-file-name "pages" venikx.com-root)
  "Directory where the pages of the website are found.")

(defvar venikx.com-site-attachments
  (regexp-opt '("jpg" "jpeg" "gif" "png" "svg"
                "ico" "cur" "css" "js"
                "eot" "woff" "woff2" "ttf"
                "html" "css" "pdf")))

(defvar venikx.com-default-site-image "assets/me.jpg"
  "The image used when no meta-image is given.")
#+end_src

*** The custom backend
#+begin_src emacs-lisp +n :results silent
(after! ox-html
  (org-export-define-derived-backend
   'venikx-html 'html
   :translate-alist
   '((export-block . venikx.com-html-export-block)
     (headline . venikx.com-html-headline)
     (link . venikx.com-html-link)
     (plain-list . venikx.com-html-plain-list)
     (quote-block . venikx.com-html-quote-block)
     (src-block . venikx.com-html-src-block)
     (section . venikx.com-html-section)
     (template . venikx.com-html-template))
   :options-alist
   '((:site-url nil nil "https://venikx.com" t)
     (:socials-twitter "SOCIALS_TWITTER" nil "_venikx" t)
     (:image "IMAGE" nil venikx.com-default-site-image t)
     (:image-alt "IMAGE_ALT" nil "Test" t)
     (:business-email nil nil "kevin@babo.digital"))))
#+end_src

**** Modifying Transcoders
***** Helper Functions
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html--attr (element &optional property)
  (let ((attributes (org-export-read-attribute :attr_html element property)))
    (if attributes (concat " " (org-html--make-attribute-string attributes)) "")))
#+end_src
***** Export Block
In case I want to export CSS or Javascript inline randomly in the document. In
other cases, just export it as usual.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-export-block (export-block _contents _info)
  "Transcode a EXPORT-BLOCK element from Org to HTML.
CONTENTS is nil.  INFO is a plist holding contextual information."
  (let ((block (org-element-property :value export-block))
        (language (org-element-property :type export-block)))
    (when block
      (cond ((string= "JAVASCRIPT" language)
             (format "<script async>%s</script>" block))
            ((string= "CSS" language)
             (format "<style type=\"text/css\">%s</style>" block))
            (t
             (org-remove-indentation block))))))
#+end_src

***** Headline
The headline adds a self-referencing link to the headline. The link is generated
by sanitzing the title.

#+begin_src emacs-lisp +n :results silent
(require 'subr-x)
(defun venikx.com-html-anchor-from-headline (headline-text)
  (thread-last headline-text
    (downcase)
    (replace-regexp-in-string " " "-")
    (replace-regexp-in-string "</?code>" "")
    (replace-regexp-in-string "[^[:alnum:]_-]" "")))

(defun venikx.com-html-headline (headline contents info)
  "Transcode a HEADLINE element from Org to HTML.
CONTENTS holds the contents of the headline.  INFO is a plist
holding contextual information."
  (let* ((text (org-export-data (org-element-property :title headline) info))
         (level (org-export-get-relative-level headline info))
         (anchor (venikx.com-html-anchor-from-headline text))
         (attributes (org-element-property :ATTR_HTML headline))
         (container (org-element-property :HTML_CONTAINER headline))
         (container-class (and container (org-element-property :HTML_CONTAINER_CLASS headline))))
    (when attributes
      (setq attributes
            (format " %s" (org-html--make-attribute-string
                           (org-export-read-attribute 'attr_html `(nil
                                                                   (attr_html ,(split-string attributes))))))))
    (concat
     (when (and container (not (string= "" container)))
       (format "<%s%s>" container (if container-class (format " class=\"%s\"" container-class) "")))
     (if (not (org-export-low-level-p headline info))
         (format "<h%d%s id=\"%s\"><a href=\"#%s\">%s</a></h%d>%s" level (or attributes "") anchor anchor text level (or contents ""))
       (concat
        (when (org-export-first-sibling-p headline info) "<ul>")
        (format "<li>%s%s</li>" text (or contents ""))
        (when (org-export-last-sibling-p headline info) "</ul>")))
     (when (and container (not (string= "" container)))
       (format "</%s>" (cl-subseq container 0 (cl-search " " container)))))))
#+end_src

***** Plain List
In ~ox-html~ the plain lists receive an extra class, which is not needed.
However additional attributes still need to be accounted for.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-plain-list (plain-list contents _info)
  "Transcode a PLAIN-LIST element from Org to HTML.
CONTENTS is the contents of the list.  INFO is a plist holding
contextual information."
  (when contents
    (let ((type (cl-case (org-element-property :type plain-list)
                  (ordered "ol")
                  (unordered "ul")
                  (descriptive "dl")
                  (other (error "Unknown HTML list type: %s" other)))))
      (format "<%s%s>\n%s</%s>" type (venikx.com-html--attr plain-list) contents type))))
#+end_src

***** Source Block
I prefer my source blocks wrapped inside a figure, so I can easily add a caption
when I feel like it. It also strips some of the classes org-mode adds by
default, which are not needed for my use-case.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-src-block (src-block contents info)
  "Transcode a SRC-BLOCK element from Org to HTML.
CONTENTS holds the contents of the item.  INFO is a plist holding
contextual information."
  (let ((code (org-html-format-code src-block info))
        (caption (org-export-get-caption src-block))
        (language (org-element-property :language src-block)))
    (when code
      (format "<figure>\n%s%s\n</figure>"
              (if caption (format "<figcaption>%s</figcaption>\n" (car caption)) "")
              (format "<pre><code class=\"language-%s\"%s>%s</code></pre>"
                      language (venikx.com-html--attr src-block) code)))))
#+end_src

***** Section
I don't care about adding extra divs across section, they are already separated
via the headlines.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-section (_section contents _info)
  "Transcode a SECTION element from Org to HTML.
CONTENTS holds the contents of the section.  INFO is a plist
holding contextual information."
  contents)
#+end_src

***** Link
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-format-path-for-anchor-tag (path)
  (concat (downcase
           (file-name-sans-extension
            path))
          ".html"))

(defun venikx.com-html-link (link contents info)
  "Transcode a LINK object from Org to HTML.
CONTENT is the description part of the link, or the empty string.
INFO is a plist holding contextual information.  See
`org-export-data'."
  (if (string= 'fuzzy (org-element-property :type link))
      (let ((path (gethash (s-replace "id:" "" (org-element-property :path link)) venikx.com-org-id-locations)))
        (print path)
        (if path
            (org-element-put-property link :path
                                      (venikx.com-format-path-for-anchor-tag
                                       (car (last (s-split "/" path))))))))
  (when (and (string= 'file (org-element-property :type link))
             (string= "org" (file-name-extension (org-element-property :path link))))
    (org-element-put-property link :path
                              (venikx.com-format-path-for-anchor-tag
                               (org-element-property :path link))))

  (if (and (string= 'file (org-element-property :type link))
           (file-name-extension (org-element-property :path link))
           (string-match "png\\|jpg\\|svg"
                         (file-name-extension
                          (org-element-property :path link)))
           (equal contents nil))
      (format "<img src=/%s >" (org-element-property :path link))
    (if (and (equal contents nil)
             (or (not (file-name-extension (org-element-property :path link)))
                 (and (file-name-extension (org-element-property :path link))
                      (not (string-match "png\\|jpg\\|svg"
                                         (file-name-extension
                                          (org-element-property :path link)))))))
        (format "<a href=\"%s\">%s</a>"
                (org-element-property :raw-link link)
                (org-element-property :raw-link link))
      (format "<a href=\"%s\">%s</a>"
              (org-element-property :path link)
              contents))))
#+end_src

***** Quote Block
The blockquote is wrapped in a ~<figure />~, when a caption is attached to the
blockquote. If no caption is attached, it renders a simple blockquote.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-quote-block (quote-block contents _info)
  "Transcode a QUOTE-BLOCK element from Org to HTML.
CONTENTS holds the contents of the block.  INFO is a plist
holding contextual information."
  (let ((caption (car (car (org-element-property :caption quote-block))))
        (caption-url (car (car (org-element-property :caption-url quote-block)))))

    (if caption (format "<figure>\n<blockquote>%s</blockquote>\n<figcaption>%s</figcaption>\n</figure>"
                        contents caption)
      (format "<blockquote>%s</blockquote>" contents))))

#+end_src

***** Template
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-template (contents info)
  (concat
   (org-html-doctype info)
   "\n"
   (format "<html lang=\"%s\">\n" (plist-get info :language))
   "<head>"
   (venikx.com-build-head contents info)
   "<link rel=\"stylesheet\" href=\"/assets/style.css\" />"
   "</head>"
   "<body>"
   "<div>"
   (venikx.com-site-header info)
   (venikx.com-site-content contents info)
   (venikx.com-site-footer info)
   "</div>"
   "</body>"
   "</html>"))
#+end_src

****** Head Builder
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-full-url (info)
  (concat (plist-get info :site-url) "/"
          (file-name-sans-extension (file-relative-name
                                     (plist-get info :this-file)
                                     (plist-get info :base-directory)))
          ".html"))

(defun venikx.com-org-element-link-parser (link)
  (with-temp-buffer
    (insert link)
    (delay-mode-hooks (org-mode))
    (goto-char (point-min))
    (org-element-link-parser)))

(defun venikx.com-head-image (info)
  (concat (plist-get info :site-url) "/"
          (if (not (venikx.com-org-element-link-parser (plist-get info :image)))
              (plist-get info :image)
            (concat
             (file-relative-name
              (file-name-directory (plist-get info :this-file))
              (plist-get info :base-directory))
             (plist-get
              (car (cdr
                    (venikx.com-org-element-link-parser (plist-get info :image)))) :path)))))

(after! esxml (defun venikx.com-build-head (contents info)
  (concat
   "")
  (sxml-to-xml
   `(head
     (meta (@ (charset "utf-8")))
     (meta (@ (name "viewport")
              (content "width=device-width, initial-scale=1")))

     (title ,(substring-no-properties (car (plist-get info :title))))
     (meta (@ (name "description")
              (content ,(plist-get info :description))))
     (link (@ (rel "canonical")
              (href ,(venikx.com-full-url info))))

     (meta (@ (name "og:title")
              (content ,(substring-no-properties (car (plist-get info :title))))))
     (meta (@ (name "og:description")
              (content ,(plist-get info :description))))
     (meta (@ (name "og:type")
              (content ,(plist-get info :meta-type))))
     (meta (@ (name "og:image")
              (content ,(venikx.com-head-image info))))
     (meta (@ (name "og:image:alt")
              (content ,(plist-get info :image-alt))))
     (meta (@ (name "og:url")
              (href ,(venikx.com-full-url info))))

     (meta (@ (name "twitter:card")
              (content "summary_large_image")))
     (meta (@ (name "twitter:site")
              (content ,(concat "@" (plist-get info :socials-twitter)))))
     (meta (@ (name "twitter:creator")
              (content ,(concat "@" (plist-get info :socials-twitter)))))
     (meta (@ (name "twitter:title")
              (content ,(substring-no-properties (car (plist-get info :title))))))
     (meta (@ (name "twitter:description")
              (content ,(plist-get info :description))))
     (meta (@ (name "twitter:image")
              (content ,(venikx.com-head-image info))))
     (meta (@ (name "twitter:image:alt")
              (content ,(plist-get info :image-alt))))

     (meta (@ (name "author")
              (content ,(substring-no-properties (car (plist-get info :author))))))
     (meta (@ (name "generator")
              (content ,(format "Emacs %s (Org mode %s)"
                                emacs-version
                                (if (fboundp 'org-version) (org-version) "unknown version")))))))))
#+end_src

****** Top Header
The header defines the bar at top of the page which includes the logo and the
navigation. It's visible on every page.

#+begin_src emacs-lisp +n :results silent
(after! esxml (defun venikx.com-site-header (info)
  (sxml-to-xml
   `(header
     (div (@ (class "header-left"))
          (a (@ (href "/")) "Kevin Rangel")
          (nav (ul
                (li (a (@ (href "/about/index.html")) "About"))
                                        ;(li (a (@ (href "/projects/index.html")) "Projects"))
                (li (a (@ (href "/posts/index.html")) "Posts")))))
     (div (@ (class "header-right"))
                                        ;(button (@ (aria-label "Toggle Mode")))
                                        ;(a (@ (href "/rss.xml")) "RSS")
          )))))
#+end_src

****** Content
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-site-content (contents info)
  (format "<main><h1>%s</h1>%s</main>"
          (substring-no-properties (car (plist-get info :title)))
          contents))
#+end_src

****** Footer
The footer defines the license, some links of the site, a potential logo, and
some links referring to socials (github, twitter, ...).

#+begin_src emacs-lisp +n :results silent
(after! esxml (defun venikx.com-site-footer (info)
  (sxml-to-xml
   `(footer
     (div (@ (class "footer-left"))
          (div (a (@ (href "/")) "Kevin Rangel"))
          (span "© 2021 Kevin 'Rangel' De Baerdemaeaker, licensed under "
                (a (@ (href "https://creativecommons.org/licenses/by-nc/4.0/"     )
                      (rel "noreferrer noopener")
                      (target "_blank"))
                   (strong "Creative Commons BY-NC 4.0"))
                "."))
     (div (@ (class "footer-right"))
          (p "Links")
          (ul
           (li (a (@ (href ,(concat "https://twitter.com/"
                                    (plist-get info :socials-twitter)))) "Twitter"))
           (li (a (@ (href ,(concat "https://github.com/"
                                    (plist-get info :socials-github)))) "GitHub"))
           (li (a (@ (href ,(concat "mailto:" (plist-get info :email)))) "Contact"))
                                        ;(li (a (@ (href "/rss.xml")) "R"))
           ))))))
#+end_src

***** Not Implemented
The transcoder is only used in development to find what the effect is of
completely disabling a transcoder.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-not-implemented (whatever contents info)
  (message "NOT IMPLEMENTED")
  (format "<div style=\"background-color: red;\">
             <p>NOT IMPLEMENTED!!</p>
             <p>TYPE %S</p>
             <p>KEY %S</p>
             <p>VALUE %S</p>
          </div>"
          (org-element-type whatever)
          (org-element-property :key whatever)
          (org-element-property :value whatever)))
#+end_src

**** Function to load the custom backend
The function is used in the project alist and defines which backend to use, in
our case, our ox-html derived backend.

#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-publish-to-html (plist filename pub-dir)
  "Publish an org file to HTML.
FILENAME is the filename of the Org file to be published. PLIST is the property
list for the given project. PUB-DIR is the publishing directory. Return output
file name."
  (org-publish-org-to 'venikx-html filename
                      (concat "." (or (plist-get plist :html-extension)
                                      org-html-extension
                                      "html"))
                      (plist-put plist :this-file filename)
                      pub-dir))
#+end_src

** The project alist
The =assets= load the assets of the posts in the folder of the posts, which
makes it possible to have duplicate names for pictures on the website as they
are unique due to being in a separate path. The =global-assets= is only used for
common assets among multiple pages.

#+begin_src emacs-lisp +n :results silent
(setq org-publish-project-alist
      (list
       (list "venikx.com:content"
             :base-extension "org"
             :recursive t
             :base-directory venikx.com-pages
             :publishing-function 'venikx.com-html-publish-to-html
             :publishing-directory (expand-file-name "public" venikx.com-root)
             :with-title t
             :with-toc nil
             ;; custom variables
             )
       (list "venikx.com:global-assets"
             :base-directory (expand-file-name "assets" venikx.com-root)
             :base-extension venikx.com-site-attachments
             :publishing-directory (expand-file-name "public/assets" venikx.com-root)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "venikx.com:assets-from-pages"
             :base-directory venikx.com-pages
             :base-extension venikx.com-site-attachments
             :publishing-directory (expand-file-name "public" venikx.com-root)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "venikx.com" :components '("venikx.com:content"
                                        "venikx.com:global-assets"
                                        "venikx.com:assets-from-pages"))))
#+end_src
